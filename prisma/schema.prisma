generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model account {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  accessToken String
  email       String   @unique
  provider    String
  image       String
  expires_at  Int
  profile     Profile?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([email, id])
}

model Profile {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId
  fullname             String?    @unique
  portfolioUrl         String?
  stackOverflowProfile String?
  githubProfile        String?
  Location             String?
  LinkedinUrl          String?
  username             String     @unique
  bio                  String?
  account              account    @relation(fields: [userId], references: [id])
  userId               String     @unique @db.ObjectId
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  comments             comments[]
  likes                likes[]
}

model Community {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  subDomain     String      @unique
  communityName String      @unique
  ownerId       String      @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  posts         post[]
  followers     followers[]
}

model post {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  body             Json
  title            String
  postType         PostType
  creatorId        String     @unique
  community        Community? @relation(fields: [communityOwnerId], references: [ownerId], onDelete: Cascade)
  communityOwnerId String?    @unique
  comments         comments[]
}

model comments {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  post      post       @relation(fields: [postId], references: [communityOwnerId], onDelete: Cascade)
  postId    String     @unique
  author    Profile    @relation(fields: [authorId], references: [userId], onDelete: Cascade)
  authorId  String     @unique @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  message   String
  replyTo   comments?  @relation("ReplyTo", fields: [replyToid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToid String?    @unique @db.ObjectId
  replies   comments[] @relation("ReplyTo")
  likes     likes[]    @relation("likesId", fields: [likesId], references: [id])
  likesId   String     @db.ObjectId
  likesData likes      @relation(fields: [likesId], references: [id])
}

model likes {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  comments     comments[]
  status       LikeType
  Profile      Profile?   @relation(fields: [profileId], references: [id])
  profileId    String?    @unique @db.ObjectId
  commentsData comments?  @relation(fields: [commentsId], references: [id])
  commentsId   String?    @db.ObjectId
  comments     comments?  @relation(fields: [commentsId], references: [id])
}

model followers {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  Community          Community? @relation(fields: [communitySubDomain], references: [subDomain], onDelete: Cascade)
  communitySubDomain String?    @unique
  followerId         String
}

enum LikeType {
  LIKE
  DISLIKE
}

enum PostType {
  JAVASCRIPT
  LINUX
  WINDOWS
  WEB_DEVELOPMENT
  MACHINE_LEARNING
  C_LANGUAGE
  PYTHON
  REACT_JS
  NEXT_JS
  HTML
  CSS
  TAILWIND_CSS
  PHP
  OTHERS
}
